import React, { useEffect, useState } from 'react'
import Layout from '../../components/Layout'
import { Tab, Tabs, TabList, TabPanel } from 'react-tabs';
import { CloudArrowUpIcon, LockClosedIcon, ServerIcon } from '@heroicons/react/20/solid'
import AllDetails from './AllDetails';
import { MdOutlineProductionQuantityLimits } from 'react-icons/md'
import { AiFillShopping, AiFillPlusCircle } from 'react-icons/ai';
import { FaUser, FaCartPlus } from 'react-icons/fa';
import { addDoc, collection, getDocs, onSnapshot, orderBy, query } from 'firebase/firestore';
import { fireDB } from '../../firebase/firebaseConfig';
import AddProduct from './Modal/AddProduct';
import { toast } from 'react-toastify';
import UpdateProduct from './Modal/UpdateProduct';

function AdminPanel() {
  // product props
  const [product, setProduct] = useState([]);


  return (
    <Layout>
      <div className="container mx-auto">
        <AllDetails product={product} />
        <div className="tab container mx-auto ">
          <Tabs defaultIndex={0} className=" " >
            <TabList className="md:flex md:space-x-8 bg-  grid grid-cols-2 text-center gap-4   md:justify-center mb-10 ">
              <Tab>
                <button type="button" className="font-medium border-b-2 shadow-2xl hover:shadow-purple-700 border-purple-500 text-purple-500 rounded-xl text-xl   px-5 py-1.5 text-center bg-[#ffffff12] ">
                  <div className="flex gap-2 items-center">
                    <MdOutlineProductionQuantityLimits />Products</div> </button>
              </Tab>
              <Tab>
                <button type="button" className="font-medium border-b-2 border-pink-500 bg-[#ffffff12] text-pink-500 shadow-2xl hover:shadow-pink-700  rounded-xl text-xl    px-5 py-1.5 text-center ">
                  <div className="flex gap-2 items-center">
                    <AiFillShopping /> Order
                  </div>
                </button>
              </Tab>
              <Tab>
                <button type="button" className="font-medium border-b-2 border-green-500 bg-[#ffffff12] text-green-500 rounded-xl text-xl shadow-2xl hover:shadow-green-700   px-5 py-1.5 text-center ">
                  <div className="flex gap-2 items-center">
                    <FaUser /> Users
                  </div>
                </button>
              </Tab>
            </TabList>
            <TabPanel>
              <Product product={product} setProduct={setProduct} />
            </TabPanel>
            <TabPanel>
              aja
            </TabPanel>
            <TabPanel>
              ajja
            </TabPanel>
            <TabPanel>
              aja
            </TabPanel>

          </Tabs>
        </div>
      </div>
    </Layout>
  )
}


function Product({ product, setProduct }) {
  // ********************** Add Product Section Start **********************
  const [loading, setLoading] = useState(false);
  const [title, setTitle] = useState('');
  const [price, setPrice] = useState(0);
  const [imageUrl, setImageUrl] = useState('');
  const [category, setCategory] = useState('');
  const [description, setDescription] = useState('');

  const [updatetitle, setUpdateTitle] = useState('');
  const [updateprice, setUpdatePrice] = useState(0);
  const [updateImageUrl, setUpdateImageUrl] = useState('');
  const [updateCategory, setUpdateCategory] = useState('');
  const [updateDescription, setUpdateDescription] = useState('');
  // console.log(product)
  // ****** add product
  const addProduct = async () => {
    const productRef = collection(fireDB, "products")
    setLoading(true)

    try {
      await addDoc(productRef, {
        title: title,
        price: price,
        imageUrl: imageUrl,
        category: category,
        description: description,
        date: new Date().toLocaleString(
          "en-US",
          {
            month: "short",
            day: "2-digit",
            year: "numeric",
          }
        )
      })
      toast.success("Product Add successfully", {
        position: "top-center",
        autoClose: 1000,
        hideProgressBar: false,
        closeOnClick: true,
        pauseOnHover: true,
        draggable: true,
        progress: undefined,
      })
      setLoading(false)
      getProductData()
    } catch (error) {
      console.log(error)
      setLoading(false)
    }
    setTitle("");
    setPrice("");
    setCategory("");
    setImageUrl("");
    setDescription("");
  }
  // ****** get product
  const getProductData = async () => {
    setLoading(true)
    try {
      const q = query(
        collection(fireDB, "products"),
        orderBy("date"),
        // limit(50)
      );
      const data = onSnapshot(q, (QuerySnapshot) => {
        let productsArray = [];
        QuerySnapshot.forEach((doc) => {
          productsArray.push({ ...doc.data(), id: doc.id });
        });
        setProduct(productsArray)
      });
      return () => data;
    } catch (error) {
      console.log(error)
      setLoading(false)
    }
  }

  useEffect(() => {
    getProductData();
  }, []);
  // ********************** Add Product Section  End **********************

  // ********************** Update Product Section  Start **********************

  const updateProduct = async (item) => {
    setLoading(true)
    try {
      await setDoc(doc(fireDB, "products",item.id));
      //  setLoading(false)
      toast.success("Product Updated successfully")
      getProductData()
      setProduct(item)
    } catch (error) {
      toast.error("Product Updated Failed")
      setLoading(false)
    }
  }
  // ********************** Update Product Section  End **********************


  // const deleteProduct = async (item) => {

  //   try {
  //     setLoading(true)
  //     await deleteDoc(doc(fireDB, "products", item.id));
  //     // toast.success('Product Deleted successfully')
  //     console.log('deleteProduct')
  //     setLoading(false)
  //     getProductData()
  //   } catch (error) {
  //     // toast.success('Product Deleted Falied')
  //     setLoading(false)

  //   }

  // }
  return (
    <div className='  px-4 md:px-0'>
      <h1 className=' text-center mb-5 text-3xl font-semibold'>Product Details</h1>
      <div className=" flex justify-end">
        <AddProduct title={title} price={price} imageUrl={imageUrl} category={category} description={description} addProduct={addProduct} setTitle={setTitle} setPrice={setPrice} setImageUrl={setImageUrl} setCategory={setCategory} setDescription={setDescription} />
      </div>
      <div className="relative overflow-x-auto">
        <table className="w-full text-sm text-left text-gray-500 dark:text-gray-400">
          <thead className="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
            <tr>
              <th scope="col" className="px-6 py-3">
                S.No
              </th>
              <th scope="col" className="px-6 py-3">
                Image
              </th>
              <th scope="col" className="px-6 py-3">
                Title
              </th>
              <th scope="col" className="px-6 py-3">
                Price
              </th>
              <th scope="col" className="px-6 py-3">
                Category
              </th>
              <th scope="col" className="px-6 py-3">
                Date
              </th>
              <th scope="col" className="px-6 py-3">
                Action
              </th>
            </tr>
          </thead>
          <tbody>
            {product.map((item, index) => {
              // console.log(item.id)
              return (
                <tr className="bg-white border-b dark:bg-gray-800 dark:border-gray-700">
                  <td className="px-6 py-4">
                    {index + 1}
                  </td>
                  <th scope="row" className="px-6 py-4 font-medium text-gray-900 whitespace-nowrap dark:text-white">
                    <img className='w-16' src={item.imageUrl} alt="img" />
                  </th>
                  <td className="px-6 py-4">
                    {item.title}
                  </td>
                  <td className="px-6 py-4">
                    {item.price}
                  </td>
                  <td className="px-6 py-4">
                    {item.category}
                  </td>
                  <td className="px-6 py-4">
                    {item.date}
                  </td>
                  <td className="px-6 py-4">
                    <div className=" flex gap-2">
                      {/* <div className=" cursor-pointer" onClick={() => deleteProduct(item.id)}>
                        <svg  xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-6 h-6">
                          <path strokeLinecap="round" strokeLinejoin="round" d="M14.74 9l-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 01-2.244 2.077H8.084a2.25 2.25 0 01-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 00-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 013.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 00-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 00-7.5 0" />
                        </svg>
                      </div> */}
                      {/* <button  onClick={() => deleteProduct(item)}>del</button> */}
                      {/* <div className=" cursor-pointer">
                        <UpdateProduct updatetitle={updatetitle} updateprice={updateprice} updateImageUrl={updateImageUrl} updateCategory={updateCategory} updateDescription={updateDescription} updateProduct={updateProduct} setUpdateTitle={setUpdateTitle} setUpdatePrice={setUpdatePrice} setUpdateImageUrl={setUpdateImageUrl} setUpdateCategory={setUpdateCategory} setUpdateDescription={setUpdateDescription}/>
                      </div> */}


                    </div>
                  </td>
                </tr>
              )
            })}
          </tbody>
        </table>
      </div>
    </div>
  )
}


export default AdminPanel



// const [loading, setLoading] = useState('');







  // useEffect(() => {
  //   getData();

  // }, [])

  // const getData = async () => {
  //   setLoading(true);
  //   try {
  //     const users = await getDocs(collection(fireDB, "products"))
  //     const productsArray = [];
  //     users.forEach((doc) => {
  //       // doc.data() is never undefined for query doc snapshots
  //       // console.log(doc.id, " => ", doc.data());
  //       const obj = {
  //         id: doc.id,
  //         ...doc.data()
  //       }
  //       productsArray.push(obj);
  //       setLoading(false);
  //     });
  //     setProduct(productsArray);
  //   } catch (error) {
  //     console.log(error);
  //     setLoading(false);
  //   }
  // }





  // const edithandle = (item) => {
  //   setProducts(item)
  //   setIsOpen(true)
  //   // setAdd(false)
  // }
  // const updateProduct = async () => {
  //   setLoading(true)
  //   try {
  //     await setDoc(doc(fireDB, "products", products.id), products);
  //     //  setLoading(false)
  //     toast.success("Product Updated successfully")
  //     // window.location.reload()
  // getData()
  //   } catch (error) {
  //     // toast.error("Product Updated Failed")
  //     setLoading(false)
  //   }   
     
  //   // console.log(updateProduct)
  // }

  // const [add, setAdd] = useState(false)
  // const addHandler = () => {
  //   setAdd(true)
  //   openModal()
  // }

  // const addProduct = async () => {
  //   setLoading(true)
  //   // window.location.reload()
  //   try {
  //     await addDoc(collection(fireDB, "products"), products);

  //     toast.success("Product Add successfully", {
  //       position: "top-center",
  //       autoClose: 5000,
  //       hideProgressBar: false,
  //       closeOnClick: true,
  //       pauseOnHover: true,
  //       draggable: true,
  //       progress: undefined,
  //     })
  //     setLoading(false)
  //     // window.location.reload()
  //     getData()
  //   } catch (error) {
  //     toast.error("Product Add Failed")
  //     setLoading(false)

  //   }
  //   // console.log(updateProduct)
  // }
  // // const {key} = addressInfo
  // // const x = Array.from(String(key), Number)
  // // const y = x.sort(function(a,b){
  // //   return a-b
  // // })



  // const deleteProduct = async (item) => {

  //   try {
  //     setLoading(true)
  //     await deleteDoc(doc(fireDB, "products", item.id));
  //     toast.success('Product Deleted successfully')
  //     setLoading(false)
  //     getData()
  //   } catch (error) {
  //     toast.success('Product Deleted Falied')
  //     setLoading(false)

  //   }

  // }
